import React, { useState, useEffect } from 'react';
import styles from './ExploiteModel.module.css';
import HeaderLite from '../../components/HeaderLite/HeaderLite';
import ImageHeaderLite from '../../components/ImageHeaderLite/ImageHeaderLite';
import bgModels from '../../assets/images/bg-models.svg';
import { BsFillFileEarmarkArrowDownFill as IconDownload } from "react-icons/bs";
import { MdSettingsSuggest as IconPredict } from "react-icons/md";
import { FaFileCsv as IconCSV, FaCopy as IconCopy } from "react-icons/fa";
import { useParams } from "react-router-dom";
import {CopyToClipboard} from 'react-copy-to-clipboard';

import { useSelector } from "react-redux";
import { useDispatch } from "react-redux";
import { getExploitables } from '../../actions/exploitables';
import axios from "axios";
import Footer from '../../components/Footer/Footer';

var fileDownload = require('js-file-download');



function ExploiteModel() {

  const [copy,setCopy] = useState();

  const { tocken } = useParams();
  const dispatch = useDispatch();
    useEffect(() => {
        dispatch(getExploitables());
    }, [dispatch]);
  const exploitable = useSelector((state) =>(state.exploitables.find(exploitable => exploitable.tocken===tocken) ));
  console.log(exploitable)
  const [modeltocken,setmodeltaken] = useState();
  const [file,setFile] = useState();
  
  const onChange=e =>{
    setFile(e.target.files[0])
  }
  const download = (e) => {
    setmodeltaken(tocken);
    console.log(modeltocken)
    axios({
      url:"//localhost:5000/downloadmodel/"+modeltocken,
      method:"GET",
      responseType:"blob"
    }).then((res)=>{
      fileDownload(res.data,'model.pickle')
    })
  }
    
  const onSubmit = (e) => {
    setmodeltaken(tocken);
    console.log(modeltocken)
    e.preventDefault();
    var data=new FormData();
    data.append('file',file);

    const url="//localhost:5000/predict/"+modeltocken;
    axios.post(url, data , {headers: {"Content-Type": "multipart/form-data"}},{ responseType: 'blob' })
          .then((res) => {
              fileDownload(res.data,'predictions.csv')
          })
          .catch((e) => {
          })
  };

  return (
    <>
      <HeaderLite />

      <div className={styles.exploiteModel + " container-md"}>
        <div className={styles.exploiteModelBlock}>
          <h4 className={styles.exploiteBlockTitle}>Use as a Python Developper</h4>
          <button className={styles.downModel} onClick={(e)=>download(e)}>Download The Model (.pickle) <span className={styles.icon}><IconDownload /></span></button> 
        </div>
        <div className={styles.exploiteModelBlock}>
          <h4 className={styles.exploiteBlockTitle}>Use as an API Client</h4>
          <div className={styles.curl}>
            CURL : 
            &gt;&gt; curl --location --request POST 'http://localhost:5000/predict/{tocken}' --form 'file=@"path of .csv you want to predict"'
            {!copy ? 
              <CopyToClipboard text={`curl --location --request POST 'http://localhost:5000/predict/${tocken}' --form 'file=@\"path of .csv you want to predict\"'"`}>
                <button title='Copy' onClick={() => setCopy(true)} className={styles.iconCopy}><IconCopy /></button>
              </CopyToClipboard> 
              : null
            }
            {copy ? 
              <CopyToClipboard text={"CURL : &gt;&gt; curl --location --request POST 'http://localhost:5000/predict/{tocken}' --form 'file=@\"path of .csv you want to predict\"'"}>
                <button title='Copied' onClick={() => setCopy(true)} className={styles.iconCopied}><IconCopy /></button>
              </CopyToClipboard> 
              : null
            }
          </div> 
        </div>
        <div className={styles.exploiteModelBlock}>
          <h4 className={styles.exploiteBlockTitle}>Use Right Now !</h4>
          <form onSubmit={onSubmit} className={styles.form + ' row justify-content-center'}>
              <div className={styles.fileInput + ' col-5'}>
                <h5> Import feature file </h5>
                <input onChange={onChange} type="file" accept=".csv" ></input> <IconCSV className={styles.iconCSV} />
              </div>
              <div className=' col-4'>
                <button className={styles.predModel} type="submit">PREDICT <span className={styles.icon}><IconPredict /></span></button>
              </div>
          </form>
        </div>
      </div>

      <Footer />
    </>
  )
}


export default ExploiteModel;
